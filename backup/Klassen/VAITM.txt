package schemas;

/*
 * Copyright 2013, Martin Kleehaus
 * Technical University of Munich (TUM)
 * Professorship for Database Systems and Applications
 */

import datagenerator.DataGenerator;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Martin Kleehaus
 */
public class SchemaVAITM extends Schemas {
    
    private Integer primaryKey = 0;
    private Integer rowCount = 1;
    
    @Override
    public void setUniqueNumber() {
        DataGenerator dg = DataGenerator.getInstance();
        dg.setUniqueNumber(1);
    }
       
    
    @Override
    public Map<String, Object> getData() throws Exception{
        
        DataGenerator dg = DataGenerator.getInstance();
        TableData tData = TableData.getInstance();
        
        //Definition of MasterData
        String[] bil = {"A","C",null};
        String[] uom = {"M3","MIN","TO","KG"};
        Map<String, Double> prio = new HashMap<>();
        prio.put("0", 0.705);
        prio.put("1", 0.805);
        prio.put("2", 0.940);
        prio.put("3", 0.996);
        prio.put("11", 1.0);
        
        if(this.getParentSchema("VAHDR").getMapItem("Sales Doc") != this.getMapItem("Sales Doc")) {
            this.setPrimaryKey(this.getDefaultPrimaryKey());
        }
        
        this.setCurrentRow();
        int cnt = 0;
        
        Map<String, Object> columns = new HashMap<>();   
        columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Sales Doc")); //Sales Doc
        columns.put(this.getMetaValues("header")[cnt++],this.getNextPrimaryKey().toString() + "0"); //Item
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial(this.parseDouble(this.getMetaValues("sfactor")[cnt-1]), this.parseDouble(this.getMetaValues("change")[cnt-1]), this.getCurrentRow(), this.getLastMapValue(this.getMetaValues("header")[cnt - 1]),Integer.MAX_VALUE)); //Material
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial("Material entered", columns.get("Material").toString())); //Material entered
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial("Matl group", columns.get("Material").toString())); //Material group
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial("Description", columns.get("Material").toString())); //Description
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial("ItCa", columns.get("Material").toString())); //ItCa
        columns.put(this.getMetaValues("header")[cnt++],dg.getItem("X",0.15,null));
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getItem(bil),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //BilRl
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getItem(dg.getRandomChars(2),0.05,null),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //Rj
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getNumberText(12),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //Product Hierarchy
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getItem(uom),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //Uom
        columns.put(this.getMetaValues("header")[cnt++],1); //onversion factor
        columns.put(this.getMetaValues("header")[cnt++],columns.get("UoM")); //Bun
        String poItem = new String();
        for(int i = 1; i<=(6-columns.get("Item").toString().length() );i++) {
            poItem = poItem + "0";
        }
        columns.put(this.getMetaValues("header")[cnt++],poItem+columns.get("Item").toString()); //POItem
        columns.put(this.getMetaValues("header")[cnt++],tData.getMaterial("Customer Material Number", columns.get("Material").toString())); //Customer Material Number
        if(this.getParentSchema("VAHDR").getMapItem("Usage") == "B0B" || this.getParentSchema("VAHDR").getMapItem("Usage") == null) {
            columns.put(this.getMetaValues("header")[cnt++],this.getMasterData("Usage", cnt-1, this.getCurrentRow(), "B" + dg.getNumberBetween(10, 99).toString())); //Usage
        } else {
            columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Usage"));
        }
        columns.put(this.getMetaValues("header")[cnt++],dg.getNumber(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]))); //Overdel Tol
        columns.put(this.getMetaValues("header")[cnt++],columns.get("Overdel Tol")); //Underdel Tol
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getNumberUpTo(9)*10,this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //Dv
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getNumberBetween(1000, 9999),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //BusA
        columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Prb")); //Prb
        //Net value
        if(this.getRowCount() > 1) {
            Double val = dg.getCurrency(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]));
            Double parentVal = Double.parseDouble(this.getParentSchema("VAHDR").getMapItem("Net value").toString());
            Double sum = 0d;
            for(Object d : this.getMasterData("Net value").toArray()) {
                sum = sum + Double.parseDouble(d.toString());
            }
            if(sum+val > parentVal) {
                columns.put(this.getMetaValues("header")[cnt++],parentVal-sum);
            } else {
                columns.put(this.getMetaValues("header")[cnt++],val);
            }
            this.setMasterData("Net value", columns.get("Net value"));
        } else {
            columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Net value"));
        }
        columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Curr")); //Currency
        columns.put(this.getMetaValues("header")[cnt++],dg.getDecimal(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]),1)); //Order Quantity
        columns.put(this.getMetaValues("header")[cnt++],columns.get("Order Quantity")); //Required deliv. qty
        columns.put(this.getMetaValues("header")[cnt++],columns.get("Order Quantity")); //Cumul.confirmed qty
        columns.put(this.getMetaValues("header")[cnt++],columns.get("UoM")); //Su
        columns.put(this.getMetaValues("header")[cnt++],dg.getDecimal(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]),2)); //Gross Weight
        columns.put(this.getMetaValues("header")[cnt++],columns.get("Gross weight")); //Net Weight
        columns.put(this.getMetaValues("header")[cnt++],this.getLastMapValue(dg.getItem("TO",0.66,"KG"),this.getMetaValues("header")[cnt - 1], this.parseDouble(this.getMetaValues("change")[cnt - 1]))); //WUn
        if(Integer.parseInt(columns.get("Prb").toString()) < 100) {
            columns.put(this.getMetaValues("header")[cnt++],null); //U
            columns.put(this.getMetaValues("header")[cnt++],"X"); //ComRI
        } else {
            columns.put(this.getMetaValues("header")[cnt++],"B"); //U
            columns.put(this.getMetaValues("header")[cnt++],null); //ComRI
        }
        columns.put(this.getMetaValues("header")[cnt++],dg.getRange(prio)); //Prio
        columns.put(this.getMetaValues("header")[cnt++],columns.get("BusA")); //PInt
        columns.put(this.getMetaValues("header")[cnt++],columns.get("BusA")); //ShpT
        columns.put(this.getMetaValues("header")[cnt++],this.getMasterData("Route", cnt-1, this.getCurrentRow(), "GB" + this.fillString(dg.getNumberUpTo(9999).toString(), "0", 4))); //Route
        columns.put(this.getMetaValues("header")[cnt++],dg.getDate((Date)this.getParentSchema("VAHDR").getMapItem("Created on"), this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]))); //Created on
        columns.put(this.getMetaValues("header")[cnt++],tData.getUser(this.parseDouble(this.getMetaValues("sfactor")[cnt-1]), this.parseDouble(this.getMetaValues("change")[cnt-1]), this.getCurrentRow(),this.getLastMapValue(this.getMetaValues("header")[cnt - 1]),Integer.MAX_VALUE)); //created by
        columns.put(this.getMetaValues("header")[cnt++],dg.getTime(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]))); //Time
        if(columns.get("ComRl") != "B") {
            columns.put(this.getMetaValues("header")[cnt++],dg.getDate((Date)columns.get("Created on"), this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]))); //BOM key dt.
        } else {
            columns.put(this.getMetaValues("header")[cnt++],null); //BOM key dt.
        }
        columns.put(this.getMetaValues("header")[cnt++],this.getParentSchema("VAHDR").getMapItem("Prb")); //Prb
        columns.put(this.getMetaValues("header")[cnt++],dg.getCurrency(this.parseDouble(this.getMetaValues("avg")[cnt-1]), this.parseDouble(this.getMetaValues("std")[cnt-1]))); //net Price
        if("MIN".equals(columns.get("UoM").toString())) {
            columns.put(this.getMetaValues("header")[cnt++],60);
        } else {
            columns.put(this.getMetaValues("header")[cnt++],60);
        }
        columns.put(this.getMetaValues("header")[cnt++], columns.get("UoM")); 
        
        this.setMap(columns);
        
        if(this.getRowCount() == this.getCurrentRow()) {
            this.dropMasterData("Net value");
        }
        return columns;
    }
    
    @Override
    public String getName() {
        return this.getClass().getSimpleName().replace("Schema", "");
    }

    @Override
    public Integer getRandomRowCount() {
        DataGenerator dg = DataGenerator.getInstance();
        this.rowCount = dg.getNumber(4.1298, 6.1897);
        return this.rowCount;
    }
    
    @Override
    public Integer getDefaultPrimaryKey() {
        return 1;
    }
    
    
}
